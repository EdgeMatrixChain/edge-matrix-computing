// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: miner/proto/miner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Miner_GetMinerStatus_FullMethodName   = "/v1.Miner/GetMinerStatus"
	Miner_GetCurrentEPower_FullMethodName = "/v1.Miner/GetCurrentEPower"
	Miner_MinerRegiser_FullMethodName     = "/v1.Miner/MinerRegiser"
)

// MinerClient is the client API for Miner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinerClient interface {
	// GetInfo returns info about the miner
	GetMinerStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MinerStatus, error)
	// GetCurrentEPower returns current E-Power
	GetCurrentEPower(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CurrentEPower, error)
	// Regiser set or remove a address
	MinerRegiser(ctx context.Context, in *MinerRegisterRequest, opts ...grpc.CallOption) (*MinerRegisterResponse, error)
}

type minerClient struct {
	cc grpc.ClientConnInterface
}

func NewMinerClient(cc grpc.ClientConnInterface) MinerClient {
	return &minerClient{cc}
}

func (c *minerClient) GetMinerStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MinerStatus, error) {
	out := new(MinerStatus)
	err := c.cc.Invoke(ctx, Miner_GetMinerStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) GetCurrentEPower(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CurrentEPower, error) {
	out := new(CurrentEPower)
	err := c.cc.Invoke(ctx, Miner_GetCurrentEPower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerClient) MinerRegiser(ctx context.Context, in *MinerRegisterRequest, opts ...grpc.CallOption) (*MinerRegisterResponse, error) {
	out := new(MinerRegisterResponse)
	err := c.cc.Invoke(ctx, Miner_MinerRegiser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinerServer is the server API for Miner service.
// All implementations must embed UnimplementedMinerServer
// for forward compatibility
type MinerServer interface {
	// GetInfo returns info about the miner
	GetMinerStatus(context.Context, *emptypb.Empty) (*MinerStatus, error)
	// GetCurrentEPower returns current E-Power
	GetCurrentEPower(context.Context, *emptypb.Empty) (*CurrentEPower, error)
	// Regiser set or remove a address
	MinerRegiser(context.Context, *MinerRegisterRequest) (*MinerRegisterResponse, error)
	mustEmbedUnimplementedMinerServer()
}

// UnimplementedMinerServer must be embedded to have forward compatible implementations.
type UnimplementedMinerServer struct {
}

func (UnimplementedMinerServer) GetMinerStatus(context.Context, *emptypb.Empty) (*MinerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinerStatus not implemented")
}
func (UnimplementedMinerServer) GetCurrentEPower(context.Context, *emptypb.Empty) (*CurrentEPower, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentEPower not implemented")
}
func (UnimplementedMinerServer) MinerRegiser(context.Context, *MinerRegisterRequest) (*MinerRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinerRegiser not implemented")
}
func (UnimplementedMinerServer) mustEmbedUnimplementedMinerServer() {}

// UnsafeMinerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinerServer will
// result in compilation errors.
type UnsafeMinerServer interface {
	mustEmbedUnimplementedMinerServer()
}

func RegisterMinerServer(s grpc.ServiceRegistrar, srv MinerServer) {
	s.RegisterService(&Miner_ServiceDesc, srv)
}

func _Miner_GetMinerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).GetMinerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Miner_GetMinerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).GetMinerStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_GetCurrentEPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).GetCurrentEPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Miner_GetCurrentEPower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).GetCurrentEPower(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Miner_MinerRegiser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).MinerRegiser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Miner_MinerRegiser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).MinerRegiser(ctx, req.(*MinerRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Miner_ServiceDesc is the grpc.ServiceDesc for Miner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Miner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Miner",
	HandlerType: (*MinerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMinerStatus",
			Handler:    _Miner_GetMinerStatus_Handler,
		},
		{
			MethodName: "GetCurrentEPower",
			Handler:    _Miner_GetCurrentEPower_Handler,
		},
		{
			MethodName: "MinerRegiser",
			Handler:    _Miner_MinerRegiser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miner/proto/miner.proto",
}
